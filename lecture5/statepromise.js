const promise = new Promise((resolve, reject) => {
    const res = true;
    if (res) {
        resolve('Resolved');
    } else {
        reject('Rejected');
    }
});

promise.then(
    (res) => console.log(res),
    (err) => console.log(err)
);

/*
 Promise ใน JavaScript เป็นอีกหนึ่งวิธีในการจัดการกับการทำงานแบบ asynchronous
  (ไม่รองรับการทำงานที่ต้องรอในลำดับเดียวกัน) โดยใช้แนวคิดของ "การสั่งสัญญา" หรือ "การให้สัญญา"
   ในการจัดการกับผลลัพธ์ที่อาจเกิดขึ้นในอนาคต หรือการทำงานที่ใช้เวลานาน เช่น การร้องขอข้อมูลจากเซิร์ฟเวอร์ 
   หรือการดึงข้อมูลจากฐานข้อมูล โดยที่ไม่ต้องรอให้กำหนดเวลาที่ทำงานจบ

โค้ดที่ให้มามีการสร้าง Promise และทำงานดังนี้:

1. สร้าง Promise ใหม่ด้วยการส่งฟังก์ชันเข้าไป (callback function) ที่มีพารามิเตอร์ `resolve` และ `reject`
 เพื่อใช้ในการติดตามผลลัพธ์ของการทำงาน asynchronous และบอกว่าสัญญาได้รับข้อมูลผลลัพธ์อย่างไร ในตัวอย่างนี้
  เงื่อนไขถูกต้อง (res = true) ดังนั้นเราเรียก `resolve('Resolved')` เพื่อบอกว่าสัญญาได้ผลลัพธ์เป็น 'Resolved' 
  ถ้าเงื่อนไขผิด (res = false) เราเรียก `reject('Rejected')` เพื่อบอกว่าสัญญาไม่สำเร็จและมีข้อผิดพลาดเป็น 'Rejected'

2. เรียกใช้เมธอด `.then()` บน Promise ที่สร้างขึ้น ซึ่งจะรับฟังก์ชันสองฟังก์ชันเป็นพารามิเตอร์:
   - ฟังก์ชันแรกจะถูกเรียกเมื่อ Promise สำเร็จ (resolve) และจะได้รับค่าที่ถูกส่งไปใน `resolve()` ในตัวอย่างนี้คือ 'Resolved'
    ซึ่งจะนำค่านี้ไปใช้ในการแสดงผลทาง console.log
   - ฟังก์ชันที่สองจะถูกเรียกเมื่อ Promise ไม่สำเร็จ (reject) และจะได้รับค่าที่ถูกส่งไปใน `reject()` ในตัวอย่างนี้คือ 'Rejected' 
   ซึ่งจะนำค่านี้ไปใช้ในการแสดงผลทาง console.log

ดังนั้นเมื่อทำงานของ Promise เสร็จสิ้น ถ้าเงื่อนไขถูกต้องจะแสดงผลลัพธ์เป็น 'Resolved' แต่ถ้าเงื่อนไขผิดจะแสดงผลลัพธ์เป็น 'Rejected'
 โดยค่าผลลัพธ์จะถูกส่งไปในฟังก์ชันที่เรากำหนดใน `.then()` ของ Promise นี้
    */